/*
 * Chester The Chat
 * Copyright (C) 2024 Timothy Millea
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "../globals.h"

#include "../ChatFormatter/chatformatter.h"
#include "../MessageStore/messagestore.h"
#include "../SettingsManager/settingsmanager.h"
#include "../UdpChatSocketManager/udpchatsocketmanager.h"
#include "../StyleRotator/stylerotator.h"
#include "../StyleManager/stylemanager.h"
#include "../InstanceIdManager/instanceidmanager.h"

#include "../ChatPager/chatpager.h"

#include <QScrollBar>
#include <QWheelEvent>
#include <QMainWindow>
#include <QMessageBox>
#include <QDesktopServices>
#include <QNetworkInterface>
#include <QDirIterator>

#ifdef ENABLE_DEMO_MODE
#include "../DemoChatSimulator/demochatsimulator.h"
#endif

QT_BEGIN_NAMESPACE
namespace Ui {
class MainWindow;
}
QT_END_NAMESPACE

/**
 * @class MainWindow
 * @brief Main application window for Chester The Chat.
 *
 * Hosts the chat interface, settings panels, and handles user interactions,
 * UDP networking, message storage, theme management, and demo mode.
 */
class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /**
     * @brief Constructs the main window.
     * @param parent Optional parent widget.
     */
    explicit MainWindow(QWidget *parent = nullptr);

    /**
     * @brief Tears down the main window, saving settings and releasing resources.
     */
    ~MainWindow();

protected:
    /**
     * @brief Filters events to implement custom scroll handling in the chat view.
     * @param obj The object receiving the event.
     * @param event The event being processed.
     * @return True if the event was handled here; otherwise false.
     */
    bool eventFilter(QObject *obj, QEvent *event) override;

private:
    /// Manages dynamic application stylesheets.
    std::unique_ptr<StyleManager> styleManager;

    /// Ensures unique per-process instance ID persistence.
    std::unique_ptr<InstanceIdManager> instanceIdManager;

    /// Handles paginated chat history loading and scroll-based navigation.
    std::unique_ptr<ChatPager> chatPager;

    /// UI form generated by Qt Designer.
    Ui::MainWindow *ui;

#ifdef ENABLE_DEMO_MODE
    /// Indicates whether demo mode is active.
    bool isDemoRunning = false;

    /// Simulator for automated themed chat sequences.
    QScopedPointer<DemoChatSimulator> demoSimulator;
        /**
     * @brief Automatically rotates through available Chester stylesheets.
     *
     * This object cycles through all registered `.qss` themes via the stylesheet
     * combo box. It's used to demonstrate the appearance of different UI themes
     * during demo mode, highlighting light and dark theme support.
     */
        StyleRotator *styleRotator = nullptr;
#endif

    /// Stores the real stylesheet name when switching in demo mode.
    QString realStyleSheetName;

    /// Timer to debounce saving the username setting.
    QTimer userNameSaveDebounceTimer;

    /** @name Chat Message Components
     *  Objects related to message formatting and persistence.
     */
    ///@{
    ChatFormatter   *m_formatter      = nullptr; ///< Formats messages for display.
    MessageStore    *messageStore     = nullptr; ///< Persists chat history.
    ///@}

    /** @name UDP Communication
     *  Handles sending and receiving chat packets over the network.
     */
    ///@{
    UdpChatSocketManager *udpManager  = nullptr; ///< Manages UDP sockets.
    ///@}

    /** @name Application Configuration
     *  Settings, managers, and instance-specific data.
     */
    ///@{
    Settings         configSettings;            ///< Loaded user/config settings.
    SettingsManager *settingsManager = nullptr; ///< Persists Settings to disk.
    int              instanceID      = 0;       ///< Unique ID for this app instance.
    bool             isApplicationStarting = false; ///< Flag suppressing signals during init.
    QMap<QString, QString> QStyleSheetMap;      ///< Maps display names to .qss file paths.
    ///@}

    /** @name Initialization Sequence
     *  One-time setup methods called during construction.
     */
    ///@{
    void initializeManagers();    ///< Creates managers for settings, networking, etc.
    void initializeUi();          ///< Configures UI elements and event filters.
    void initializeDatabase();    ///< Opens message DB and loads initial messages.
    void connectSignals();        ///< Connects internal signals and slots.
    void loadInitialState();      ///< Applies saved settings and loads UI state.
    ///@}

    /** @name UI Population and Sync
     *  Methods to populate and refresh UI controls.
     */
    ///@{
    void fillNetworkWidgets();    ///< Lists valid IPv4 interfaces in network combo box.
    void updateUIWidgets();       ///< Syncs widget values from current Settings.
    ///@}

    /** @name Chat Display
     *  Renders chat history into the UI.
     */
    ///@{
    /**
     * @brief Renders a batch of messages into the chat view.
     * @param messages List of Message objects to display.
     */
    void displayMessages(const QList<Message> &messages);
    ///@}

    /** @name Style & Appearance
     *  Dynamic loading and application of stylesheets and backgrounds.
     */
    ///@{
    void setStyleSheet();         ///< Applies selected .qss if enabled.
    void setBackgroundImage();    ///< Toggles background graphic in chat.
    void loadQStyleSheetFolder(); ///< Scans directory for .qss files.
    void populateStyleSheetMap(const QString &folderPath);     ///< Fills QStyleSheetMap.
    void populateStyleSheetComboBox();                        ///< Populates UI combo box.
    QString chatBackgroundStyle() const; ///< Returns CSS snippet for chat background.
    ///@}

    /** @name Application Metadata
     *  Methods for title, version, and About dialog composition.
     */
    ///@{
    void setAppWindowTitle();     ///< Builds and sets the window title string.
    QString buildVersionSuffix(const QString &version) const; ///< Formats version suffix.
    QString buildAppVersionString() const;   ///< Constructs full version string.
    QString detectCompilerInfo() const;      ///< Returns Qt/minGW build info.
    QString buildAboutText(const QString &version,
                           const QString &compileDate,
                           const QString &releaseDate,
                           const QString &compilerInfo) const; ///< Creates About text.
    ///@}

    /** @name UDP Messaging Helpers
     *  Encoding, sending, and storing chat packets.
     */
    ///@{
    QByteArray buildRawUdpPayload(const QString &user, const QString &msg) const; ///< Encodes "user - msg".
    bool sendUdpMessage(const QByteArray &data,
                        const QHostAddress &address,
                        quint16 port); ///< Sends datagram, returns success.
    void storeAndDisplaySentMessage(const QString &user,
                                    const QString &msg,
                                    const QDateTime &timestamp); ///< Logs and appends sent message.
    QHostAddress parseLocalAddress() const; ///< Parses selected local address ("ANY" â‡’ AnyIPv4).
    bool bindUdpSockets(const QHostAddress &local,
                        const QHostAddress &remote,
                        quint16 port); ///< Binds receive/send sockets.
    void updateUiOnConnectSuccess();         ///< Adjusts UI on socket bind success.
    void resetUiAfterDisconnect();           ///< Restores UI on disconnect.
    bool isValidIPv4Address(const QString &ip) const; ///< Validates non-link-local IPv4.
    QString generateNextTestMessage();       ///< Produces sequenced test messages.
    ///@}

    /** @name Resource Utilities
     *  Loading and opening embedded PDF/manual files.
     */
    ///@{
    void openResourceFile(const QString &fileName); ///< Copies & opens a resource.
    bool copyResourceToFile(const QString &resourcePath, const QString &targetPath); ///< Overwrites target.
    ///@}

    /**
     * @brief Re-renders currently visible messages, used after theme changes.
     */
    void redrawCurrentMessages();

#ifdef ENABLE_DEMO_MODE
    /**
     * @brief Configures UI for entering demo mode.
     */
    void startDemoModeUiSetup();

    /**
     * @brief Restores UI after exiting demo mode.
     */
    void stopDemoModeUiReset();
#endif

private slots:
    /** @name Help & About Slots */
    ///@{
    void on_actionAbout_triggered();    ///< Shows custom About dialog.
    void on_actionAbout_Qt_triggered(); ///< Shows Qt About dialog.
    void on_actionQt_License_triggered(); ///< Opens Qt license PDF.
    void on_actionUser_Manual_triggered(); ///< Opens user manual PDF.
    ///@}

    /** @name Chat Interaction Slots */
    ///@{
    void on_pushButtonSend_clicked();      ///< Sends chat text on Send button.
    void on_lineEditChatText_returnPressed(); ///< Sends on <Enter> in text field.
    void on_pushButtonTestMsg_clicked();   ///< Inserts a test message into input.
    ///@}

    /** @name Connection Control Slots */
    ///@{
    void on_pushButtonConnect_clicked();    ///< Binds UDP sockets and connects.
    void on_pushButtonDisconnect_clicked(); ///< Closes sockets and resets UI.
    ///@}

    /** @name Network Settings Slots */
    ///@{
    void on_checkBoxMulticast_clicked(bool checked);           ///< Toggles multicast mode.
    void on_checkBoxLoopback_clicked(bool checked);            ///< Toggles UDP loopback.
    void on_spinBoxTTL_valueChanged(int arg1);                 ///< Updates UDP TTL.
    void on_comboBoxLocalUDPNetwork_currentTextChanged(const QString &arg1); ///< Updates local IP.
    void on_lineEditLocalUDPPort_textChanged(const QString &arg1); ///< Updates local port.
    void on_lineEditRemoteUDPNetwork_textChanged(const QString &arg1); ///< Updates remote IP.
    void on_lineEditRemoteUDPPort_textChanged(const QString &arg1); ///< Updates remote port.
    ///@}

    /** @name Appearance Settings Slots */
    ///@{
    void on_comboBoxSelectStyleSheet_currentTextChanged(const QString &arg1); ///< Selects theme.
    void on_checkBoxLoadStyleSheet_clicked(bool checked); ///< Enables/disables stylesheet.
    void on_checkBoxDisplayBackgroundImage_clicked(bool checked); ///< Toggles background image.
    ///@}

    /** @name User Preferences Slots */
    ///@{
    void on_lineEditUserName_textChanged(const QString &arg1); ///< Validates & debounces username.
    ///@}

    /** @name Database Management Slots */
    ///@{
    void on_pushButtonDeleteDatabase_clicked(); ///< Clears chat history on confirmation.
    ///@}

#ifdef ENABLE_DEMO_MODE
    /**
     * @brief Toggles demo mode on or off.
     */
    void on_pushButtonStartStopDemo_clicked();
#endif

signals:
    /// Requests the main window to switch to the Chat tab.
    void signalRequestTabSwitchToChat();

    /// Requests the current messages be re-rendered in the chat view.
    void signalRequestRedrawCurrentMessages();

};

#endif // MAINWINDOW_H
